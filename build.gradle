buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

repositories {
    maven { url "https://maven.shedaniel.me" }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

apply from: 'version.gradle'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
// MixinGradle:
apply plugin: 'org.spongepowered.mixin'

version = "${minecraft_version}-${mod_version}"
group = 'com.lowdragmc.ldlib'
archivesBaseName = "${mod_name}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: "parchment", version: "${mappings_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
        }

        server {
        }

        data {
            args '--mod', 'ldlib', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
    runs.forEach { runConfig ->
        runConfig.workingDirectory(project.file("run"))
        runConfig.property('forge.logging.console.level', 'debug')
        runConfig.property('forge.logging.markers', 'REGISTRIES')
        runConfig.arg("-mixin.config' , 'ldlib.mixins.json")
        runConfig.mods {
            ldlib {
                source sourceSets.main
                source sourceSets.test
            }
        }
        if (enable_mixin_debug) runConfig.jvmArg("-Dmixin.debug=true")
        runConfig.jvmArg("-Dmixin.debug.export=true")
        runConfig.jvmArg("-Dmixin.dumpTargetOnFailure=true")
        runConfig.jvmArg("-Dmixin.checks.interfaces=true")
        runConfig.jvmArg("-Dmixin.hotSwap=true")
        if (enable_hot_swap_agent) {
            runConfig.jvmArg("-XX:+AllowEnhancedClassRedefinition")
            runConfig.jvmArg("-XX:HotswapAgent=fatjar")
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    // Apply Mixin AP

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    //JEI
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    implementation fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    //REI
    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-default-plugin-forge:${rei_version}")
    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-api-forge:${rei_version}")
    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")

    compileOnly fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
    compileOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}")

    if (System.getProperty('idea.sync.active') != 'true') {
        annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    }


}

mixin {
    debug.export = true
    mixin.hotSwap = true
    mixin.checks.interfaces=true
    add sourceSets.main, 'ldlib.refmap.json'
    config 'ldlib.mixins.json'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "LowDrag Lib",
                "Specification-Version"   : project.version,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "LowDrag Lib",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs'            : 'ldlib.mixins.json'
        ])
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveBaseName.set(project.archivesBaseName)
    archiveVersion.set("${project.version}")
    archiveClassifier.set('sources')
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url "https://maven.firstdarkdev.xyz/snapshots"
            credentials {
                username System.getenv("MAVEN_USER")
                password System.getenv("MAVEN_PASS")
            }
        }
    }
}
